# ============================================================================
# DEV VM (10.10.10.114) - Development Stack
# ============================================================================
# Gitea: Git hosting + Container Registry + CI/CD (Gitea Actions)
# act_runner: Executes Gitea Actions workflows
# Dokploy: Deployment platform with built-in Traefik
# ============================================================================

services:
  # ============================================================================
  # PORTAINER AGENT - Container Management
  # ============================================================================
  # Connects to Portainer on observability VM (10.10.10.112:9443)

  portainer-agent:
    image: portainer/agent:latest
    container_name: portainer-agent
    restart: always
    ports:
      - "9001:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
      - /:/host
    networks:
      - dev_net
    # No health check - minimal container without shell/utilities
    # Portainer server monitors agent connectivity
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # ALLOY - Log Shipper (sends Docker logs to Loki on observability VM)
  # ============================================================================

  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./alloy/config:/etc/alloy
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - "10.10.10.114:12345:12345"  # Alloy UI
    networks:
      - dev_net
    healthcheck:
      test: ["CMD-SHELL", "alloy tools pprof health http://localhost:12345 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================================================
  # BESZEL AGENT - System Monitor (sends data to Hub on observability VM)
  # ============================================================================
  # Configure after deploying Hub (copy connection details from Hub web UI)

  beszel-agent:
    image: henrygd/beszel-agent:latest
    container_name: beszel-agent
    restart: unless-stopped
    network_mode: host  # Required for network interface stats
    volumes:
      - ./beszel/agent_data:/var/lib/beszel-agent  # Agent persistent data
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker container stats
    environment:
      LISTEN: 45876
      HUB_URL: http://10.10.10.112:8090
      KEY: ${BESZEL_KEY}
      TOKEN: ${BESZEL_TOKEN}
    healthcheck:
      test: ['CMD', '/agent', 'health']
      start_period: 5s
      interval: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ==========================================================================
  # GITEA - Self-hosted Git with Actions & Container Registry
  # ==========================================================================
  gitea:
    image: gitea/gitea:1.24
    container_name: gitea
    restart: unless-stopped
    environment:
      # User/Group
      - USER_UID=1000
      - USER_GID=1000

      # Database (PostgreSQL on db host)
      # Only pre-configure database connection - all other settings via web installer
      - GITEA__database__DB_TYPE=postgres
      - GITEA__database__HOST=10.10.10.111:5432
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - GITEA__database__PASSWD=${GITEA_DB_PASSWORD}

    ports:
      - "10.10.10.114:3001:3000"  # HTTP
      - "10.10.10.114:222:22"      # SSH

    volumes:
      - ./gitea/data:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro

    networks:
      - dev_net

    depends_on:
      - postgres-check

    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================================================
  # PostgreSQL Health Check (ensures db is ready)
  # ==========================================================================
  postgres-check:
    image: postgres:16-alpine
    container_name: postgres-check
    command: >
      sh -c "until pg_isready -h 10.10.10.111 -U gitea; do
        echo 'Waiting for PostgreSQL...';
        sleep 2;
      done;
      echo 'PostgreSQL is ready!'"
    environment:
      - PGPASSWORD=${GITEA_DB_PASSWORD}
    networks:
      - dev_net
    restart: "no"

  # ==========================================================================
  # ACT RUNNER - Executes Gitea Actions workflows
  # ==========================================================================
  act-runner:
    image: gitea/act_runner:latest
    container_name: act-runner
    restart: unless-stopped

    volumes:
      - ./act-runner/data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro

    environment:
      - GITEA_INSTANCE_URL=http://gitea:3000
      - GITEA_RUNNER_REGISTRATION_TOKEN=${GITEA_RUNNER_TOKEN}
      - GITEA_RUNNER_NAME=homelab-runner
      - GITEA_RUNNER_LABELS=ubuntu-latest:docker://node:20-bookworm,ubuntu-22.04:docker://node:20-bookworm

    networks:
      - dev_net

    depends_on:
      gitea:
        condition: service_healthy

  # ==========================================================================
  # DOKPLOY - Deployment Platform (Commented out - deploy separately)
  # ==========================================================================
  # Dokploy installation uses its own installer script
  # Run: curl -sSL https://dokploy.com/install.sh | sh
  # This will set up Dokploy with its own Traefik instance

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  dev_net:
    driver: bridge
    name: dev_net
